{"ast":null,"code":"var _jsxFileName = \"/Users/asadali/PhpstormProjects/React/smallapps/src/App.js\",\n    _s = $RefreshSig$();\n\nimport boxes from './boxes';\nimport React from 'react';\nimport Box from './ox.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [squares, setSquares] = React.useState(boxes);\n  const style = {\n    backgroundColor: props.darkMode ? \"#222222\" : \"#cccccc\"\n  };\n  /**\n   * Challenge part 2:\n   * 1. Create a separate component called \"Box\" and\n   *    replace the `div` above with our <Box /> components\n   * 2. Pass the Box component a prop called `on` with the\n   *    value of the same name from the `boxes` objects\n   * 3. In the Box component, apply dynamic styles to determine\n   *    the backgroundColor of the box. If it's `on`, set the\n   *    backgroundColor to \"#222222\". If off, set it to \"none\"\n   */\n\n  const squareElements = squares.map(square => /*#__PURE__*/_jsxDEV(Box, {\n    on: square.on\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Boxes will go here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), squareElements]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"Y/VPbAx1/6n7Q/3HlS2ABqCXoj8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["boxes","React","Box","App","props","squares","setSquares","useState","style","backgroundColor","darkMode","squareElements","map","square","on"],"sources":["/Users/asadali/PhpstormProjects/React/smallapps/src/App.js"],"sourcesContent":["\nimport boxes from './boxes';\nimport React from 'react';\nimport Box from './ox.js'\n\n\nfunction App(props) {\n\n    const [squares,setSquares] = React.useState(boxes);\n const style = {\n     backgroundColor:props.darkMode ? \"#222222\" : \"#cccccc\"\n }\n    /**\n     * Challenge part 2:\n     * 1. Create a separate component called \"Box\" and\n     *    replace the `div` above with our <Box /> components\n     * 2. Pass the Box component a prop called `on` with the\n     *    value of the same name from the `boxes` objects\n     * 3. In the Box component, apply dynamic styles to determine\n     *    the backgroundColor of the box. If it's `on`, set the\n     *    backgroundColor to \"#222222\". If off, set it to \"none\"\n     */\n\n    const squareElements = squares.map(square => (\n\n        <Box on={square.on}/>\n\n    ))\n\n\n    return (\n        <main>\n            <h1>Boxes will go here</h1>\n            {squareElements}\n        </main>\n    )\n}\n\nexport default App;\n"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,SAAhB;;;AAGA,SAASC,GAAT,CAAaC,KAAb,EAAoB;EAAA;;EAEhB,MAAM,CAACC,OAAD,EAASC,UAAT,IAAuBL,KAAK,CAACM,QAAN,CAAeP,KAAf,CAA7B;EACH,MAAMQ,KAAK,GAAG;IACVC,eAAe,EAACL,KAAK,CAACM,QAAN,GAAiB,SAAjB,GAA6B;EADnC,CAAd;EAGG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI,MAAMC,cAAc,GAAGN,OAAO,CAACO,GAAR,CAAYC,MAAM,iBAErC,QAAC,GAAD;IAAK,EAAE,EAAEA,MAAM,CAACC;EAAhB;IAAA;IAAA;IAAA;EAAA,QAFmB,CAAvB;EAOA,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,EAEKH,cAFL;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAMH;;GA9BQR,G;;KAAAA,G;AAgCT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}